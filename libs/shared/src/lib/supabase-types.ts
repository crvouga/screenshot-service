/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  '/projects': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.projects.id'];
          created_at?: parameters['rowFilter.projects.created_at'];
          name?: parameters['rowFilter.projects.name'];
          owner_id?: parameters['rowFilter.projects.owner_id'];
          whitelisted_urls?: parameters['rowFilter.projects.whitelisted_urls'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['projects'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** projects */
          projects?: definitions['projects'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.projects.id'];
          created_at?: parameters['rowFilter.projects.created_at'];
          name?: parameters['rowFilter.projects.name'];
          owner_id?: parameters['rowFilter.projects.owner_id'];
          whitelisted_urls?: parameters['rowFilter.projects.whitelisted_urls'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.projects.id'];
          created_at?: parameters['rowFilter.projects.created_at'];
          name?: parameters['rowFilter.projects.name'];
          owner_id?: parameters['rowFilter.projects.owner_id'];
          whitelisted_urls?: parameters['rowFilter.projects.whitelisted_urls'];
        };
        body: {
          /** projects */
          projects?: definitions['projects'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/configuration': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.configuration.id'];
          max_project_count?: parameters['rowFilter.configuration.max_project_count'];
          max_daily_requests?: parameters['rowFilter.configuration.max_daily_requests'];
          client_library_url?: parameters['rowFilter.configuration.client_library_url'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['configuration'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** configuration */
          configuration?: definitions['configuration'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.configuration.id'];
          max_project_count?: parameters['rowFilter.configuration.max_project_count'];
          max_daily_requests?: parameters['rowFilter.configuration.max_daily_requests'];
          client_library_url?: parameters['rowFilter.configuration.client_library_url'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.configuration.id'];
          max_project_count?: parameters['rowFilter.configuration.max_project_count'];
          max_daily_requests?: parameters['rowFilter.configuration.max_daily_requests'];
          client_library_url?: parameters['rowFilter.configuration.client_library_url'];
        };
        body: {
          /** configuration */
          configuration?: definitions['configuration'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/profiles': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.profiles.id'];
          created_at?: parameters['rowFilter.profiles.created_at'];
          avatar_seed?: parameters['rowFilter.profiles.avatar_seed'];
          name?: parameters['rowFilter.profiles.name'];
          theme_mode?: parameters['rowFilter.profiles.theme_mode'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['profiles'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions['profiles'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.profiles.id'];
          created_at?: parameters['rowFilter.profiles.created_at'];
          avatar_seed?: parameters['rowFilter.profiles.avatar_seed'];
          name?: parameters['rowFilter.profiles.name'];
          theme_mode?: parameters['rowFilter.profiles.theme_mode'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.profiles.id'];
          created_at?: parameters['rowFilter.profiles.created_at'];
          avatar_seed?: parameters['rowFilter.profiles.avatar_seed'];
          name?: parameters['rowFilter.profiles.name'];
          theme_mode?: parameters['rowFilter.profiles.theme_mode'];
        };
        body: {
          /** profiles */
          profiles?: definitions['profiles'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/capture_screenshot_requests': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.capture_screenshot_requests.id'];
          created_at?: parameters['rowFilter.capture_screenshot_requests.created_at'];
          project_id?: parameters['rowFilter.capture_screenshot_requests.project_id'];
          image_type?: parameters['rowFilter.capture_screenshot_requests.image_type'];
          delay_sec?: parameters['rowFilter.capture_screenshot_requests.delay_sec'];
          target_url?: parameters['rowFilter.capture_screenshot_requests.target_url'];
          origin_url?: parameters['rowFilter.capture_screenshot_requests.origin_url'];
          strategy?: parameters['rowFilter.capture_screenshot_requests.strategy'];
          status?: parameters['rowFilter.capture_screenshot_requests.status'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['capture_screenshot_requests'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** capture_screenshot_requests */
          capture_screenshot_requests?: definitions['capture_screenshot_requests'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.capture_screenshot_requests.id'];
          created_at?: parameters['rowFilter.capture_screenshot_requests.created_at'];
          project_id?: parameters['rowFilter.capture_screenshot_requests.project_id'];
          image_type?: parameters['rowFilter.capture_screenshot_requests.image_type'];
          delay_sec?: parameters['rowFilter.capture_screenshot_requests.delay_sec'];
          target_url?: parameters['rowFilter.capture_screenshot_requests.target_url'];
          origin_url?: parameters['rowFilter.capture_screenshot_requests.origin_url'];
          strategy?: parameters['rowFilter.capture_screenshot_requests.strategy'];
          status?: parameters['rowFilter.capture_screenshot_requests.status'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.capture_screenshot_requests.id'];
          created_at?: parameters['rowFilter.capture_screenshot_requests.created_at'];
          project_id?: parameters['rowFilter.capture_screenshot_requests.project_id'];
          image_type?: parameters['rowFilter.capture_screenshot_requests.image_type'];
          delay_sec?: parameters['rowFilter.capture_screenshot_requests.delay_sec'];
          target_url?: parameters['rowFilter.capture_screenshot_requests.target_url'];
          origin_url?: parameters['rowFilter.capture_screenshot_requests.origin_url'];
          strategy?: parameters['rowFilter.capture_screenshot_requests.strategy'];
          status?: parameters['rowFilter.capture_screenshot_requests.status'];
        };
        body: {
          /** capture_screenshot_requests */
          capture_screenshot_requests?: definitions['capture_screenshot_requests'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  projects: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    name: string;
    /** Format: uuid */
    owner_id: string;
    /** Format: ARRAY */
    whitelisted_urls: unknown[];
  };
  configuration: {
    /**
     * Format: public.singleton
     * @description Note:
     * This is a Primary Key.<pk/>
     * @enum {string}
     */
    id: 'singleton';
    /** Format: bigint */
    max_project_count: number;
    /** Format: bigint */
    max_daily_requests: number;
    /**
     * Format: text
     * @default https://www.npmjs.com/package/@crvouga/screenshot-service
     */
    client_library_url: string;
  };
  profiles: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /** Format: text */
    avatar_seed: string;
    /** Format: text */
    name: string;
    /**
     * Format: public.theme_mode
     * @enum {string}
     */
    theme_mode: 'light' | 'dark' | 'system';
  };
  capture_screenshot_requests: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `projects.id`.<fk table='projects' column='id'/>
     */
    project_id: string;
    /**
     * Format: public.capture_screenshot_request_image_type
     * @enum {string}
     */
    image_type: 'jpeg' | 'png';
    /** Format: bigint */
    delay_sec: number;
    /** Format: text */
    target_url: string;
    /** Format: text */
    origin_url: string;
    /**
     * Format: public.capture_screenshot_request_strategy
     * @enum {string}
     */
    strategy: 'NetworkFirst' | 'CacheFirst';
    /**
     * Format: public.capture_screenshot_request_status
     * @enum {string}
     */
    status:
      | 'Loading'
      | 'Cancelled'
      | 'Failed'
      | 'Succeeded_Cached'
      | 'Succeeded_Network';
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: 'params=single-object';
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: 'return=representation' | 'return=minimal' | 'return=none';
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: 'count=none';
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description projects */
  'body.projects': definitions['projects'];
  /** Format: uuid */
  'rowFilter.projects.id': string;
  /** Format: timestamp with time zone */
  'rowFilter.projects.created_at': string;
  /** Format: text */
  'rowFilter.projects.name': string;
  /** Format: uuid */
  'rowFilter.projects.owner_id': string;
  /** Format: ARRAY */
  'rowFilter.projects.whitelisted_urls': string;
  /** @description configuration */
  'body.configuration': definitions['configuration'];
  /** Format: public.singleton */
  'rowFilter.configuration.id': string;
  /** Format: bigint */
  'rowFilter.configuration.max_project_count': string;
  /** Format: bigint */
  'rowFilter.configuration.max_daily_requests': string;
  /** Format: text */
  'rowFilter.configuration.client_library_url': string;
  /** @description profiles */
  'body.profiles': definitions['profiles'];
  /** Format: uuid */
  'rowFilter.profiles.id': string;
  /** Format: timestamp with time zone */
  'rowFilter.profiles.created_at': string;
  /** Format: text */
  'rowFilter.profiles.avatar_seed': string;
  /** Format: text */
  'rowFilter.profiles.name': string;
  /** Format: public.theme_mode */
  'rowFilter.profiles.theme_mode': string;
  /** @description capture_screenshot_requests */
  'body.capture_screenshot_requests': definitions['capture_screenshot_requests'];
  /** Format: uuid */
  'rowFilter.capture_screenshot_requests.id': string;
  /** Format: timestamp with time zone */
  'rowFilter.capture_screenshot_requests.created_at': string;
  /** Format: uuid */
  'rowFilter.capture_screenshot_requests.project_id': string;
  /** Format: public.capture_screenshot_request_image_type */
  'rowFilter.capture_screenshot_requests.image_type': string;
  /** Format: bigint */
  'rowFilter.capture_screenshot_requests.delay_sec': string;
  /** Format: text */
  'rowFilter.capture_screenshot_requests.target_url': string;
  /** Format: text */
  'rowFilter.capture_screenshot_requests.origin_url': string;
  /** Format: public.capture_screenshot_request_strategy */
  'rowFilter.capture_screenshot_requests.strategy': string;
  /** Format: public.capture_screenshot_request_status */
  'rowFilter.capture_screenshot_requests.status': string;
}

export interface operations {}

export interface external {}
